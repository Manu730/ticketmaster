// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: ticketmaster.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketMasterClient is the client API for TicketMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketMasterClient interface {
	BookTicket(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*BookTicketOutput, error)
	GetReceipt(ctx context.Context, in *UserTrainInput, opts ...grpc.CallOption) (*Receipt, error)
	ShowAllocations(ctx context.Context, in *ShowAllocationInput, opts ...grpc.CallOption) (*ShowAllocationOutput, error)
	RemoveUser(ctx context.Context, in *UserTrainInput, opts ...grpc.CallOption) (*Empty, error)
	ModifyUserAllocation(ctx context.Context, in *UserAllocModifyInput, opts ...grpc.CallOption) (*Empty, error)
}

type ticketMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketMasterClient(cc grpc.ClientConnInterface) TicketMasterClient {
	return &ticketMasterClient{cc}
}

func (c *ticketMasterClient) BookTicket(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*BookTicketOutput, error) {
	out := new(BookTicketOutput)
	err := c.cc.Invoke(ctx, "/TicketMaster/BookTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMasterClient) GetReceipt(ctx context.Context, in *UserTrainInput, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/TicketMaster/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMasterClient) ShowAllocations(ctx context.Context, in *ShowAllocationInput, opts ...grpc.CallOption) (*ShowAllocationOutput, error) {
	out := new(ShowAllocationOutput)
	err := c.cc.Invoke(ctx, "/TicketMaster/ShowAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMasterClient) RemoveUser(ctx context.Context, in *UserTrainInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/TicketMaster/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketMasterClient) ModifyUserAllocation(ctx context.Context, in *UserAllocModifyInput, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/TicketMaster/ModifyUserAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketMasterServer is the server API for TicketMaster service.
// All implementations must embed UnimplementedTicketMasterServer
// for forward compatibility
type TicketMasterServer interface {
	BookTicket(context.Context, *Receipt) (*BookTicketOutput, error)
	GetReceipt(context.Context, *UserTrainInput) (*Receipt, error)
	ShowAllocations(context.Context, *ShowAllocationInput) (*ShowAllocationOutput, error)
	RemoveUser(context.Context, *UserTrainInput) (*Empty, error)
	ModifyUserAllocation(context.Context, *UserAllocModifyInput) (*Empty, error)
	mustEmbedUnimplementedTicketMasterServer()
}

// UnimplementedTicketMasterServer must be embedded to have forward compatible implementations.
type UnimplementedTicketMasterServer struct {
}

func (UnimplementedTicketMasterServer) BookTicket(context.Context, *Receipt) (*BookTicketOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTicket not implemented")
}
func (UnimplementedTicketMasterServer) GetReceipt(context.Context, *UserTrainInput) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTicketMasterServer) ShowAllocations(context.Context, *ShowAllocationInput) (*ShowAllocationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAllocations not implemented")
}
func (UnimplementedTicketMasterServer) RemoveUser(context.Context, *UserTrainInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTicketMasterServer) ModifyUserAllocation(context.Context, *UserAllocModifyInput) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserAllocation not implemented")
}
func (UnimplementedTicketMasterServer) mustEmbedUnimplementedTicketMasterServer() {}

// UnsafeTicketMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketMasterServer will
// result in compilation errors.
type UnsafeTicketMasterServer interface {
	mustEmbedUnimplementedTicketMasterServer()
}

func RegisterTicketMasterServer(s grpc.ServiceRegistrar, srv TicketMasterServer) {
	s.RegisterService(&TicketMaster_ServiceDesc, srv)
}

func _TicketMaster_BookTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMasterServer).BookTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketMaster/BookTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMasterServer).BookTicket(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMaster_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTrainInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMasterServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketMaster/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMasterServer).GetReceipt(ctx, req.(*UserTrainInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMaster_ShowAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowAllocationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMasterServer).ShowAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketMaster/ShowAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMasterServer).ShowAllocations(ctx, req.(*ShowAllocationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMaster_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTrainInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMasterServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketMaster/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMasterServer).RemoveUser(ctx, req.(*UserTrainInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketMaster_ModifyUserAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAllocModifyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketMasterServer).ModifyUserAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TicketMaster/ModifyUserAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketMasterServer).ModifyUserAllocation(ctx, req.(*UserAllocModifyInput))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketMaster_ServiceDesc is the grpc.ServiceDesc for TicketMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TicketMaster",
	HandlerType: (*TicketMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookTicket",
			Handler:    _TicketMaster_BookTicket_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _TicketMaster_GetReceipt_Handler,
		},
		{
			MethodName: "ShowAllocations",
			Handler:    _TicketMaster_ShowAllocations_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TicketMaster_RemoveUser_Handler,
		},
		{
			MethodName: "ModifyUserAllocation",
			Handler:    _TicketMaster_ModifyUserAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketmaster.proto",
}
